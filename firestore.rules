
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to identify admin users
    function isAdmin() {
      let adminEmails = ['tumbikarthik2797@gmail.com','deepakperumal09@gmail.com'];
      return request.auth != null && request.auth.token.email in adminEmails;
    }

    // Function to check for essential booking data fields during creation
    function hasSufficientBookingDataForCreate(data) {
      return data.name != null && data.name is string &&
             data.email != null && data.email is string &&
             data.phone != null && data.phone is string &&
             data.serviceType != null && data.serviceType is string &&
             data.preferredDate != null && data.preferredDate is timestamp &&
             data.preferredTime != null && data.preferredTime is string &&
             data.userEmail != null && data.userEmail is string &&
             data.status != null && data.status is string &&
             data.bookedAt != null && // serverTimestamp will be a pending write, check for presence
             data.displayId != null && data.displayId is string;
    }

    // Users collection:
    match /users/{userId} {
      // A user can create or update their own document
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // A user can read their own document, and an admin can read ANY user document
      allow read: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      
      // An admin can list all users
      allow list: if isAdmin();
    }

    // Service Bookings collection:
    match /serviceBookings/{bookingId} {
      // Create: relies on client-side auth check and data validation by hasSufficientBookingDataForCreate
      allow create: if hasSufficientBookingDataForCreate(request.resource.data);

      // Read: Allow any read, filtering is done in server actions.
      // Admins can also read everything via getAllBookings, which has its own checks.
      allow read: if true;

      // Update: Allow any update from server; admin check is performed in the server action.
      allow update: if true;

      // Deletion can be restricted, e.g., only by admins or not at all.
      // allow delete: if isAdmin(); // Example: only admins can delete
    }

    // Allow list operations (queries) on serviceBookings.
    // The actual documents returned are still governed by per-document 'read' rules (which is 'if true' here).
    match /serviceBookings/{document=**} {
      allow list: if true;
    }

    // NEW: Contact Submissions collection
    match /contactSubmissions/{submissionId} {
      // Allow any authenticated user to create a contact submission
      allow create: if request.auth != null &&
                       request.resource.data.name is string &&
                       request.resource.data.email is string &&
                       request.resource.data.message is string &&
                       (request.resource.data.subject == null || request.resource.data.subject is string) && // subject can be optional
                       request.resource.data.submittedAt == request.time; // Ensure submittedAt is a server timestamp

      // Allow only admins to read or list contact submissions
      // This is a good practice if you plan to build an admin UI for these later.
      // If no admin UI is planned, and no client ever needs to read them,
      // you could restrict read/list further or even remove it.
      allow read: if isAdmin();
    }

    // Allow admins to list contact submissions
    match /contactSubmissions/{document=**} {
        allow list: if isAdmin();
    }

    // Counters collection is no longer used.
    // match /counters/serviceBookingCounter {
    //   allow read, write: if request.auth != null;
    // }
  }
}
