
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to identify admin users
    // IMPORTANT: Ensure adminEmails matches your ADMIN_EMAIL constant in the app.
    function isAdmin() {
      let adminEmails = ['tumbikarthik2797@gmail.com','deepakperumal09@gmail.com'];
      return request.auth != null && request.auth.token.email in adminEmails;
    }

    // Function to check for essential fields when creating a booking
    // This function does NOT check request.auth.
    function hasSufficientBookingDataForCreate(data) {
      return data.name is string && data.name.size() > 0 &&
             data.email is string && data.email.size() > 0 &&
             data.phone is string && data.phone.size() > 0 &&
             data.serviceType is string && data.serviceType.size() > 0 &&
             data.preferredDate is timestamp && // Ensure it's a timestamp
             data.preferredTime is string && data.preferredTime.size() > 0 &&
             data.userEmail is string && data.userEmail.size() > 0 && // This should be the user who is booking
             data.status is string && data.status.size() > 0 &&
             data.bookedAt is timestamp && // This should be a serverTimestamp or valid client timestamp
             data.displayId is string && data.displayId.size() > 0;
    }

    // Users collection:
    // - A user can read, create, and update their own profile.
    match /users/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Service Bookings collection:
    match /serviceBookings/{bookingId} {
      // Creating a booking relies on client-side auth check and server-side data validation.
      allow create: if hasSufficientBookingDataForCreate(request.resource.data);

      // Reading individual bookings is now open.
      // Security relies on server actions (getUserBookings, getAllBookings)
      // to filter correctly before sending to client.
      allow read: if true;

      // Admins can update any booking (e.g., status).
      // This still requires the admin to be authenticated.
      allow update: if request.auth != null && isAdmin();

      // Deletion can be restricted, e.g., only by admins or not at all.
      // allow delete: if request.auth != null && isAdmin();
    }

    // Listing service bookings is now open.
    // Security relies on server actions (getUserBookings, getAllBookings)
    // to query appropriately (e.g., where('userEmail', '==', currentUserEmail)).
    match /serviceBookings/{document=**} {
      allow list: if true;
    }

    // Counters collection is no longer used.
    // match /counters/serviceBookingCounter {
    //   allow read, write: if request.auth != null; // Or more permissive if transactions need it
    // }
  }
}
