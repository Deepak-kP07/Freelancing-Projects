
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection:
    // Allow users to read their own profile.
    // Allow users to create their own profile (e.g., on signup).
    // Allow users to update their own profile (e.g., lastLoginAt).
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
    }

    // Service Bookings:
    // Allow authenticated users to create bookings.
    // Allow users to read their own bookings.
    // Admins (identified by email) can read/list/update all bookings.
    match /serviceBookings/{bookingId} {
      allow create: if request.auth != null; // User is logged in
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userEmail || // Owner can read
                    isAdmin() // Admin can read
                  );
      // For list operations (admin dashboard), this rule allows admins to list.
      // Firestore rules do not apply to collection group queries directly for 'list' permission in the same way.
      // The getAllBookings function fetches all documents, and this read rule (if isAdmin) or individual read access applies.
      // True admin-only list is best enforced by Firebase Functions.
      allow list: if isAdmin(); 
      allow update: if isAdmin(); // Only admins can update status.
    }

    // Contact Submissions:
    // Allow authenticated users to create contact messages.
    // Admins can read/list these submissions.
    match /contactSubmissions/{submissionId} {
      allow create: if request.auth != null; // Authenticated users can create
      allow read, list: if isAdmin(); // Admins can read and list
      // Explicitly disallow updates/deletes by anyone for contact submissions for now
      allow update, delete: if false; 
    }

    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      // IMPORTANT: This function checks against a list of admin emails
      // defined IN THE RULES THEMSELVES.
      let adminEmails = [
        'tumbikarthik2797@gmail.com',
        'deepakperumal09@gmail.com'
        // Add other admin emails here as strings
      ];
      return request.auth != null && request.auth.token.email in adminEmails;
    }
  }
}
