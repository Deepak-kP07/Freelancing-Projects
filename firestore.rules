
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // IMPORTANT: Ensure your actual admin email(s) are listed here.
      let adminEmails = [
        'tumbikarthik2797@gmail.com',
        'deepakperumal09@gmail.com'
        // Add other admin emails here, e.g., 'another.admin@example.com'
      ];
      return request.auth != null && request.auth.token.email in adminEmails;
    }

    // Function to check if essential booking data fields are present
    // Ensure this matches the fields set in newBookingData in actions.ts
    function hasRequiredBookingFields(data) {
      return data.name != null &&
             data.email != null && // This is the form email, which becomes userEmail in the booking
             data.phone != null &&
             data.serviceType != null &&
             data.preferredDate != null && // Firestore Timestamp
             data.preferredTime != null &&
             data.userEmail != null &&     // This is the specific field for user's email for querying
             data.status != null &&
             data.displayId != null &&
             // bookedAt is serverTimestamp, so not checked for presence here,
             // but ensure it's part of the object sent to Firestore.
             true; // Keep true at the end if all conditions are ANDed
    }

    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow users to write to their own profile (e.g., update displayName, photoURL)
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /serviceBookings/{bookingId} {
      // Admins can read any booking. Users can read their own bookings.
      allow read: if request.auth != null && (resource.data.userEmail == request.auth.token.email || isAdmin());
      // Authenticated users can list (queries will be further filtered by server logic and read rules)
      allow list: if request.auth != null;

      // MODIFIED CREATE RULE:
      // No longer checks request.auth directly for create.
      // Relies on:
      // 1. Client-side auth check before calling the server action.
      // 2. Server action populating userEmail (and other fields) correctly.
      // 3. This rule checking for the presence of essential fields.
      allow create: if hasRequiredBookingFields(request.resource.data);

      // Only admins can update booking status
      allow update: if request.auth != null && isAdmin();
      // Only admins can delete bookings
      allow delete: if request.auth != null && isAdmin();
    }
  }
}
